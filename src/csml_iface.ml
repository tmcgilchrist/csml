(* This file is released under the terms of an MIT-like license.     *)
(* See the attached LICENSE file.                                    *)
(* Copyright 2016 by LexiFi.                                         *)

(* This module should not depend on custom C primitives. It can be
   used to link ML modules generated by the IDL into a pure ML main
   program (C# functions cannot be called!). *)

type cshandle

exception Csharp_exception of string * string * cshandle

(* Base class for ML objects that wraps C# values *)

class csval (handle : cshandle) = object
  method cshandle = handle
end


let csharp_available = ref false

let err name s =
  Obj.repr (fun _ -> Printf.eprintf "C# code for %s / %s is not available.\n%!" name s; assert false)

let release_cs_value = ref (err "release_cs_value" "")
let resolve_cs2ml = ref (fun _ _ -> raise Not_found)
let csml_pop = ref (err "csml_pop" "")

let find_cs2ml_callback arity s name =
  let slot = lazy (try !resolve_cs2ml arity s with Not_found -> err name s) in
  fun x -> Obj.magic (Lazy.force slot) x

let () =
  Dynlink.allow_unsafe_modules true

let ml2cs_tbl = Hashtbl.create 16
let ml2cs_register s x =
  let x = Obj.magic x in
  Callback.register s x;
  Hashtbl.replace ml2cs_tbl s x
let ml2cs_registered s =
  Obj.magic (Hashtbl.find ml2cs_tbl s)

let () =
  Printexc.register_printer
    (function
      | Dynlink.Error e -> Some (Printf.sprintf "Dynlink Error: %s" (Dynlink.error_message e))
      | _ -> None
    )

let loadfile s =
  let s =
    if Dynlink.is_native then (Filename.chop_extension s) ^ ".cmxs"
    else s
  in
  Dynlink.loadfile s


let ml_stubs_notified = Hashtbl.create 8
let notify_ml_stub s = Hashtbl.replace ml_stubs_notified s ()
let ml_stub_available = Hashtbl.mem ml_stubs_notified
